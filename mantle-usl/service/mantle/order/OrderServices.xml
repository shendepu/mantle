<?xml version="1.0" encoding="UTF-8"?>
<!--
This Work is in the public domain and is provided on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied,
including, without limitation, any warranties or conditions of TITLE,
NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE.
You are solely responsible for determining the appropriateness of using
this Work and assume any risks associated with your use of this Work.

This Work includes contributions authored by David E. Jones, not as a
"work for hire", who hereby disclaims any copyright to the same.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-1.3.xsd">

<!-- STATUS: EXPERIMENTAL -->

<!--
h1. General Order Services

h2. General Order Placement and eCommerce Usage

| create customer | PartyServices.create#Account |
| create/update/delete customer address | ContactServices.create#PostalAddress, .update#PartyPostalAddress |
| create/update/delete customer phone | ContactServices.create#TelecomNumber, .update#PartyTelecomNumber |
| create/update/delete customer credit card | PaymentMethodServices.create#CreditCard, .update#CreditCard |

| login: merge with previous open | merge#OrderItems |
| find customer open orders       | find#OpenOrders - TODO |

| init cart (auto on add to cart) | create#Order |
| add to cart                     | add#OrderProductQuantity, create#OrderItem |
| change cart quantity            | update#OrderProductQuantity, update#OrderItem |
| remove from cart                | delete#OrderItem |
| set billing and shipping info   | set#OrderBillingShippingInfo |
| split order                     | create#OrderPart |
| confirm/complete order          | place#Order |

| create order from shopping list (or other existing order) | clone#Order - TODO |

-->

    <service verb="get" noun="OrderDisplayInfo">
        <in-parameters>
            <parameter name="orderId"/>
        </in-parameters>
        <out-parameters>
            <parameter name="orderHeader" type="org.moqui.entity.EntityValue"/>
            <parameter name="orderItemList" type="List"/>
            <parameter name="paymentList" type="List"/>
            <parameter name="orderPartList" type="List"/>
            <parameter name="orderPartInfoList" type="List"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.order.OrderHeader" value-field="orderHeader"/>
            <entity-find-related value-field="orderHeader" relationship-name="mantle.order.OrderItem"
                    list="orderItemList" order-by-list="['orderItemSeqId']"/>
            <entity-find-related value-field="orderHeader" relationship-name="mantle.account.payment.Payment"
                    list="paymentList" order-by-list="['paymentId']"/>

            <entity-find-related value-field="orderHeader" relationship-name="mantle.order.OrderPart" list="orderPartList"/>
            <!-- get order info by part for more detailed display -->
            <script>
            import org.moqui.entity.EntityList
            import org.moqui.entity.EntityValue

            orderPartInfoList = []
            for (EntityValue orderPart in orderPartList) {
                partOrderItemList = orderItemList.cloneList().filterByAnd([orderPartSeqId:orderPart.orderPartSeqId])
                partPaymentList = paymentList.cloneList().filterByAnd([orderPartSeqId:orderPart.orderPartSeqId])
                partPaymentInfoList = []
                for (EntityValue partPayment in partPaymentList) {
                    Map partPaymentInfo = [partPayment:partPayment]
                    EntityValue paymentMethod = partPayment.PaymentMethod
                    EntityValue paymentMethodTypeEnum = partPayment."PaymentMethodType#moqui.basic.Enumeration"
                    if (paymentMethod) {
                        partPaymentInfo.paymentMethod = paymentMethod
                        partPaymentInfo.creditCard = paymentMethod.CreditCard
                        partPaymentInfo.creditCardTypeEnum = partPaymentInfo.creditCard."CreditCardType#moqui.basic.Enumeration"
                        partPaymentInfo.postalAddress = paymentMethod.PostalAddress
                        partPaymentInfo.postalAddressStateGeo = partPaymentInfo.postalAddress?."StateProvince#moqui.basic.Geo"
                        partPaymentInfo.telecomNumber = paymentMethod.TelecomNumber
                        if (!paymentMethodTypeEnum) paymentMethodTypeEnum = paymentMethod."PaymentMethodType#moqui.basic.Enumeration"
                    }
                    partPaymentInfo.paymentMethodTypeEnum = paymentMethodTypeEnum
                    partPaymentInfoList.add(partPaymentInfo)
                }

                EntityValue postalAddress = orderPart.PostalAddress
                orderPartInfoList.add([orderPart:orderPart, partOrderItemList:partOrderItemList,
                        shipmentMethodEnum:orderPart."ShipmentMethod#moqui.basic.Enumeration",
                        partPaymentList:partPaymentList, partPaymentInfoList:partPaymentInfoList,
                        postalAddress:postalAddress, postalAddressStateGeo:postalAddress?."StateProvince#moqui.basic.Geo",
                        telecomNumber:orderPart.TelecomNumber])
            }
            </script>
            <!-- <log level="warn" message="======== OrderDisplayInfo orderPartInfoList: ${orderPartInfoList}"/> -->
        </actions>
    </service>
    <service verb="get" noun="OrderItemsTotalCount">
        <in-parameters><parameter name="orderId"/></in-parameters>
        <out-parameters><parameter name="itemCount" type="BigDecimal"/></out-parameters>
        <actions>
            <set field="itemCount" from="0.0"/>
            <entity-find entity-name="mantle.order.OrderItem" list="orderItemList"><econdition field-name="orderId"/></entity-find>
            <iterate list="orderItemList" entry="orderItem"><set field="itemCount" from="itemCount + orderItem.quantity"/></iterate>
        </actions>
    </service>

    <!-- Order/Part Services -->
    <service verb="create" noun="Order">
        <description>
            Create an Order (OrderHeader and one OrderPart).
            All parameters are optional so that this can be called transparently to create a shell/empty order.
        </description>
        <in-parameters>
            <parameter name="orderName"/>

            <parameter name="statusId" default-value="OrderOpen">
                <description>The initial statusId for both header and part.</description></parameter>
            <parameter name="entryDate" default="ec.user.nowTimestamp"/>
            <parameter name="visitId" default="ec.user.visitId"/>
            <parameter name="currencyUomId" default-value="USD"/>
            <parameter name="billingAccountId"/>
            <parameter name="productStoreId"/>
            <parameter name="salesChannelEnumId"/>

            <parameter name="terminalId"/>
            <parameter name="externalId"/>
            <parameter name="syncStatusId"/>
            <parameter name="firstAttemptOrderId"/>

            <!-- parameters for the initial OrderPart -->
            <parameter name="vendorPartyId"/>
            <parameter name="customerPartyId"/>
            <parameter name="otherPartyOrderId"/>
        </in-parameters>
        <out-parameters>
            <parameter name="orderId" required="true"/>
            <parameter name="orderPartSeqId" required="true"/>
        </out-parameters>
        <actions>
            <service-call name="create#mantle.order.OrderHeader" in-map="context" out-map="context"/>
            <service-call name="create#mantle.order.OrderPart" in-map="context" out-map="context"/>
        </actions>
    </service>
    <service verb="create" noun="OrderPart">
        <in-parameters>
            <parameter name="orderId" required="true"/>
            <parameter name="statusId" default-value="OrderOpen"/>

            <parameter name="vendorPartyId"/>
            <parameter name="customerPartyId"/>
            <parameter name="otherPartyOrderId"/>
        </in-parameters>
        <out-parameters>
            <parameter name="orderPartSeqId" required="true"/>
        </out-parameters>
        <actions>
            <service-call name="create#mantle.order.OrderPart" in-map="context" out-map="context"/>
        </actions>
    </service>

    <service verb="update" noun="OrderHeaderTotal">
        <in-parameters>
            <parameter name="orderId"/>
        </in-parameters>
        <actions>
            <set field="totalSum" from="0.0" type="BigDecimal"/>
            <entity-find entity-name="mantle.order.OrderPart" list="orderPartList">
                <econdition field-name="orderId"/>
            </entity-find>
            <iterate list="orderPartList" entry="orderPart">
                <set field="totalSum" from="totalSum + orderPart.partTotal"/>
            </iterate>
            <entity-find-one entity-name="mantle.order.OrderHeader" value-field="orderHeader"/>
            <set field="orderHeader.grandTotal" from="totalSum"/>
            <entity-update value-field="orderHeader"/>
        </actions>
    </service>
    <service verb="update" noun="OrderPartTotal">
        <in-parameters>
            <parameter name="orderId" required="true"/>
            <parameter name="orderPartSeqId" required="true"/>
        </in-parameters>
        <actions>
            <set field="totalSum" from="0.0" type="BigDecimal"/>
            <entity-find entity-name="mantle.order.OrderItem" list="orderItemList">
                <econdition field-name="orderId"/>
                <econdition field-name="orderPartSeqId"/>
            </entity-find>
            <iterate list="orderItemList" entry="orderItem">
                <service-call name="mantle.order.OrderServices.get#OrderItemTotal" out-map="itemTotalOut"
                        in-map="[orderItem:orderItem]"/>
                <set field="totalSum" from="totalSum + itemTotalOut.itemTotal"/>
            </iterate>

            <entity-find-one entity-name="mantle.order.OrderPart" value-field="orderPart"/>
            <set field="orderPart.partTotal" from="totalSum"/>
            <entity-update value-field="orderPart"/>

            <!-- now update the OrderHeader.grandTotal -->
            <service-call name="mantle.order.OrderServices.update#OrderHeaderTotal" in-map="[orderId:orderId]"/>
        </actions>
    </service>
    <service verb="get" noun="OrderItemTotal">
        <in-parameters>
            <parameter name="orderItem" type="org.moqui.entity.EntityValue"/>
        </in-parameters>
        <out-parameters>
            <parameter name="itemTotal" type="BigDecimal"/>
        </out-parameters>
        <actions>
            <set field="itemTotal" from="0.0" type="BigDecimal"/>
            <set field="itemTotal" from="itemTotal + ((orderItem.unitAmount ?: 0) * orderItem.quantity)"/>

            <!-- recursively get total of child OrderItems -->
            <entity-find-related value-field="orderItem" relationship-name="Child#OrderItem" list="childOrderItemList"/>
            <iterate list="childOrderItemList" entry="childOrderItem">
                <service-call name="mantle.order.OrderServices.get#OrderItemTotal" out-map="getOitResult"
                        in-map="[orderItem:childOrderItem]"/>
                <set field="itemTotal" from="itemTotal + getOitResult.itemTotal"/>
            </iterate>
        </actions>
    </service>

    <!-- OrderItem Services -->
    <service verb="create" noun="OrderItem">
        <in-parameters>
            <parameter name="orderId" required="true"/>
            <parameter name="orderPartSeqId" required="true"/>
            <parameter name="itemTypeEnumId" default-value="ItemProduct"/>

            <parameter name="productId"/>
            <parameter name="productConfigSavedId"/>

            <parameter name="itemDescription"/>
            <parameter name="comments"/>

            <parameter name="quantity" type="BigDecimal" default-value="1"/>
            <parameter name="selectedAmount" type="BigDecimal"/>

            <parameter name="unitAmount" type="BigDecimal"/>
            <parameter name="unitListPrice" type="BigDecimal"/>
            <parameter name="isModifiedPrice"/>
        </in-parameters>
        <out-parameters>
            <parameter name="orderItemSeqId" required="true"/>
        </out-parameters>
        <actions>
            <if condition="productId">
                <entity-find-one entity-name="mantle.product.Product" value-field="product"/>
                <if condition="product == null"><return error="true" message="Product [${productId}] not found."/></if>
            </if>
            <if condition="!itemDescription"><set field="itemDescription" from="product?.productName"/></if>
            <entity-make-value entity-name="mantle.order.OrderItem" value-field="orderItem"/>
            <entity-set value-field="orderItem" include="all" set-if-empty="true"/>
            <entity-sequenced-id-secondary value-field="orderItem"/>
            <entity-create value-field="orderItem"/>

            <set field="result.orderItemSeqId" from="orderItem.orderItemSeqId"/>
        </actions>
    </service>
    <service verb="update" noun="OrderItem">
        <in-parameters>
            <auto-parameters include="pk" required="true"/>
            <auto-parameters include="nonpk"/>
        </in-parameters>
        <actions>
            <entity-find-one entity-name="mantle.order.OrderItem" value-field="orderItem"/>
            <entity-set value-field="orderItem" include="nonpk"/>
            <entity-update value-field="orderItem"/>
        </actions>
    </service>
    <service verb="delete" noun="OrderItem">
        <in-parameters>
            <auto-parameters include="pk" required="true"/>
        </in-parameters>
        <actions>
            <entity-make-value entity-name="mantle.order.OrderItem" value-field="orderItem"/>
            <entity-set value-field="orderItem" include="pk"/>
            <entity-delete value-field="orderItem"/>
        </actions>
    </service>

    <!-- OrderProductQuantity aka "Cart" Services -->
    <service verb="add" noun="OrderProductQuantity" authenticate="anonymous-all">
        <description>A service for an add-to-cart sort of operation, including:
            1. create an Order if no orderId is passed in
            2. determine the price to charge for the Product (and update based on quantity as needed)
            3. find a OrderItem matching the productId, and if found update quantity
            4. if no existing OrderItem is found create a new OrderItem
        </description>
        <in-parameters>
            <parameter name="orderId"/>
            <parameter name="orderPartSeqId"/>
            <parameter name="customerPartyId"/>
            <parameter name="currencyUomId"/>
            <parameter name="productStoreId"/>

            <parameter name="productId" required="true"/>
            <parameter name="quantity" type="BigDecimal" default-value="1"/>
            <parameter name="itemTypeEnumId" default-value="ItemProduct"/>
            <parameter name="unitAmount" type="BigDecimal"/>
        </in-parameters>
        <out-parameters>
            <parameter name="orderId" required="true"/>
            <parameter name="orderPartSeqId" required="true"/>
            <parameter name="orderItemSeqId" required="true"/>
        </out-parameters>
        <actions>
            <!-- lookup orderPartSeqId if not passed in -->
            <if condition="!orderPartSeqId">
                <entity-find entity-name="OrderPart" list="orderPartList">
                    <econdition field-name="orderId"/><order-by field-name="orderPartSeqId"/></entity-find>
                <set field="orderPartSeqId" from="orderPartList?.first?.orderPartSeqId"/>
            </if>

            <entity-find-one entity-name="mantle.order.OrderPart" value-field="orderPart"/>
            <entity-find-one entity-name="mantle.product.store.ProductStore" value-field="productStore"/>
            <set field="vendorPartyId" from="orderPart?.vendorPartyId ?: productStore?.organizationPartyId"/>
            <set field="currencyUomId" from="currencyUomId ?: productStore?.defaultCurrencyUomId"/>

            <!-- have customerPartyId default to current user's partyId -->
            <set field="customerPartyId" from="(customerPartyId ?: orderPart?.customerPartyId) ?: ec.user.userAccount?.partyId"/>

            <if condition="!orderId">
                <if condition="customerPartyId">
                    <entity-find entity-name="mantle.order.OrderHeaderAndPart" list="existingOrderList">
                        <econdition field-name="statusId" value="OrderOpen"/>
                        <econdition field-name="customerPartyId"/>
                        <select-field field-name="orderId"/><select-field field-name="orderPartSeqId"/>
                        <order-by field-name="-entryDate"/><!-- get most recent open order -->
                    </entity-find>
                    <if condition="existingOrderList">
                        <set field="orderId" from="existingOrderList[0].orderId"/>
                        <set field="orderPartSeqId" from="existingOrderList[0].orderPartSeqId"/>
                    </if>
                </if>
                <!-- no existing open (cart) order found? create one -->
                <if condition="!orderId">
                    <service-call name="mantle.order.OrderServices.create#Order" out-map="createOrderOut"
                            in-map="[currencyUomId:currencyUomId, productStoreId:productStoreId,
                                vendorPartyId:vendorPartyId, customerPartyId:customerPartyId]"/>
                    <set field="orderId" from="createOrderOut.orderId"/>
                    <set field="orderPartSeqId" from="createOrderOut.orderPartSeqId"/>
                </if>
            </if>

            <!-- find an OrderItem for the productId and increment quantity if found, otherwise create OrderItem with quantity -->
            <entity-find entity-name="mantle.order.OrderItem" list="orderItemList">
                <econdition-object field="[orderId:orderId, productId:productId, productConfigSavedId:null, forAssetId:null, selectedAmount:null]"/>
            </entity-find>

            <!-- calculate the price based on quantity, etc, -->
            <if condition="!unitAmount">
                <service-call name="mantle.product.PriceServices.get#ProductPrice" out-map="priceMap"
                        in-map="[productId:productId, quantity:quantity, priceUomId:currencyUomId,
                         productStoreId:productStoreId, customerPartyId:customerPartyId, vendorPartyId:vendorPartyId]"/>

                <set field="unitAmount" from="priceMap.price"/>
                <set field="unitListPrice" from="priceMap.listPrice"/>
                <set field="isModifiedPrice" value="N"/>

                <else><set field="isModifiedPrice" value="Y"/></else>
            </if>

            <if condition="orderItemList">
                <set field="orderItemSeqId" from="orderItemList[0].orderItemSeqId"/>
                <set field="orderPartSeqId" from="orderItemList[0].orderPartSeqId" set-if-empty="false"/>
                <set field="quantity" from="quantity + orderItemList[0].quantity"/>
                <service-call name="mantle.order.OrderServices.update#OrderItem" in-map="true"/>

                <else>
                    <service-call name="mantle.order.OrderServices.create#OrderItem" in-map="context" out-map="createOrderItemOut"/>
                    <set field="orderItemSeqId" from="createOrderItemOut.orderItemSeqId"/>
                </else>
            </if>
        </actions>
    </service>
    <service verb="update" noun="OrderProductQuantity" authenticate="anonymous-all">
        <in-parameters>
            <parameter name="orderId" required="true"/>
            <parameter name="orderItemSeqId" required="true"/>
            <parameter name="quantity" type="BigDecimal" required="true"/>
        </in-parameters>
        <actions>
            <if condition="quantity &lt;= 0">
                <service-call name="mantle.order.OrderServices.delete#OrderItem"
                        in-map="[orderId:orderId, orderItemSeqId:orderItemSeqId]"/>
                <return/>
            </if>

            <!-- calculate the price based on quantity, etc, -->
            <!-- TODO: consider making this a separate service to either get a price for an OrderItem or update it in place -->
            <entity-find-one entity-name="mantle.order.OrderHeader" value-field="orderHeader"/>
            <entity-find-one entity-name="mantle.order.OrderItem" value-field="orderItem"/>
            <entity-find-related-one value-field="orderItem" relationship-name="mantle.order.OrderPart" to-value-field="orderPart"/>
            <service-call name="mantle.product.PriceServices.get#ProductPrice" out-map="priceMap"
                    in-map="[productId:orderItem.productId, quantity:quantity, priceUomId:orderHeader.currencyUomId,
                        productStoreId:orderHeader.productStoreId, customerPartyId:orderPart.customerPartyId,
                        vendorPartyId:orderPart.vendorPartyId]"/>
            <set field="unitAmount" from="priceMap.price" set-if-empty="false"/>
            <set field="unitListPrice" from="priceMap.listPrice" set-if-empty="false"/>
            <set field="isModifiedPrice" value="N"/>

            <service-call name="mantle.order.OrderServices.update#OrderItem" in-map="context"/>
        </actions>
    </service>
    <service verb="merge" noun="OrderItems">
        <in-parameters>
            <parameter name="orderId" required="true"/>
            <parameter name="fromOrderId" required="true"/>
        </in-parameters>
        <actions>
            <entity-find entity-name="mantle.order.OrderItem" list="orderItemList">
                <econdition field-name="orderId" from="fromOrderId"/>
            </entity-find>
            <iterate list="orderItemList" entry="orderItem">
                <service-call name="mantle.order.OrderServices.add#OrderProductQuantity"
                        in-map="[orderId:orderId, productId:orderItem.productId, quantity:orderItem.quantity]"/>
            </iterate>
        </actions>
    </service>

    <service verb="set" noun="OrderBillingShippingInfo">
        <!-- TODO: make this service less simple: support multiple payments, and need to update Payment.amount when cart updates -->
        <in-parameters>
            <parameter name="orderId" required="true"/>
            <parameter name="orderPartSeqId"/>
            <parameter name="paymentId"/>

            <parameter name="paymentMethodId"/>
            <parameter name="paymentMethodTypeEnumId"/>
            <parameter name="shippingPostalContactMechId"/>
            <parameter name="shippingTelecomContactMechId"/>

            <parameter name="carrierAndShipmentMethod"/>
            <parameter name="carrierPartyId"/>
            <parameter name="shipmentMethodEnumId"/>
        </in-parameters>
        <out-parameters>
            <parameter name="paymentId"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.order.OrderHeader" value-field="orderHeader"/>
            <if condition="orderPartSeqId">
                <entity-find-one entity-name="mantle.order.OrderPart" value-field="orderPart"/>

                <else>
                    <!-- just get the first part -->
                    <entity-find entity-name="mantle.order.OrderPart" list="orderPartList">
                        <econdition field-name="orderId"/>
                        <order-by field-name="orderPartSeqId"/>
                    </entity-find>
                    <set field="orderPart" from="orderPartList.first"/>
                    <set field="orderPartSeqId" from="orderPart.orderPartSeqId"/>
                </else>
            </if>

            <set field="orderPart.postalContactMechId" from="shippingPostalContactMechId"/>
            <set field="orderPart.telecomContactMechId" from="shippingTelecomContactMechId"/>
            <if condition="carrierAndShipmentMethod">
                <set field="carrierPartyId" from="carrierAndShipmentMethod.split(':')[0]"/>
                <set field="shipmentMethodEnumId" from="carrierAndShipmentMethod.split(':')[1]"/>
            </if>
            <set field="orderPart.carrierPartyId" from="carrierPartyId"/>
            <set field="orderPart.shipmentMethodEnumId" from="shipmentMethodEnumId"/>
            <entity-update value-field="orderPart"/>

            <!-- TODO: find a better place/way to call these, maybe even turn this service into some sort of workflow -->
            <if condition="orderHeader.productStoreId">
                <!-- Calculate Shipping, do this before the Payment is created/updated -->
                <service-call name="mantle.shipment.CarrierServices.calculate#OrderPartShipping"
                        in-map="[orderId:orderId, orderPartSeqId:orderPart.orderPartSeqId]"/>
                <!-- Calculate Tax, after Shipping as it might be taxed, before Payment so tax is included in total -->
                <service-call name="mantle.other.TaxServices.calculate#OrderSalesTax"
                        in-map="[orderId:orderId, orderPartSeqId:orderPart.orderPartSeqId]"/>
            </if>

            <if condition="paymentId">
                <entity-find-one entity-name="mantle.account.payment.Payment" value-field="payment"/>

                <else>
                    <!-- just get the first part -->
                    <entity-find entity-name="mantle.account.payment.Payment" list="paymentList">
                        <econdition field-name="orderId"/>
                        <econdition field-name="orderPartSeqId"/>
                        <order-by field-name="paymentId"/>
                    </entity-find>
                    <set field="payment" from="paymentList.first"/>
                </else>
            </if>

            <if condition="!paymentMethodTypeEnumId &amp;&amp; paymentMethodId">
                <entity-find-one entity-name="mantle.account.method.PaymentMethod" value-field="paymentMethod"/>
                <set field="paymentMethodTypeEnumId" from="paymentMethod.paymentMethodTypeEnumId"/>
            </if>
            <if condition="payment">
                <!-- update existing payment -->
                <set field="payment.paymentMethodId" from="paymentMethodId"/>
                <set field="payment.paymentMethodTypeEnumId" from="paymentMethodTypeEnumId"/>
                <set field="payment.amount" from="orderPart.partTotal"/>
                <entity-update value-field="payment"/>
                <set field="paymentId" from="payment.paymentId"/>

                <else>
                    <!-- create a new Payment for the Order -->
                    <service-call name="mantle.order.OrderServices.add#OrderPartPayment" out-map="context"
                            in-map="[orderId:orderId, orderPartSeqId:orderPartSeqId, paymentMethodId:paymentMethodId,
                                paymentMethodTypeEnumId:paymentMethodTypeEnumId]"/>
                </else>
            </if>
        </actions>
    </service>
    <service verb="add" noun="OrderPartPayment">
        <in-parameters>
            <parameter name="orderId" required="true"/>
            <parameter name="orderPartSeqId" required="true"/>
            <parameter name="paymentMethodId"/>
            <parameter name="paymentMethodTypeEnumId"/>
        </in-parameters>
        <out-parameters>
            <parameter name="paymentId"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.order.OrderHeader" value-field="orderHeader"/>
            <entity-find-one entity-name="mantle.order.OrderPart" value-field="orderPart"/>
            <service-call name="create#mantle.account.payment.Payment" out-map="context"
                    in-map="[orderId:orderId, orderPartSeqId:orderPartSeqId, paymentTypeEnumId:'PtInvoicePayment',
                        paymentMethodId:paymentMethodId, paymentMethodTypeEnumId:paymentMethodTypeEnumId,
                        amount:orderPart.partTotal, amountUomId:orderHeader.currencyUomId, statusId:'PmntPromised',
                        fromPartyId:orderPart.customerPartyId, toPartyId:orderPart.vendorPartyId]"/>
        </actions>
    </service>

    <!-- Order Status Change Services -->
    <service verb="change" noun="OrderStatusInterface" type="interface">
        <in-parameters><parameter name="orderId" required="true"/></in-parameters>
        <out-parameters><parameter name="oldStatusId"/><parameter name="statusChanged" type="Boolean"/></out-parameters>
    </service>
    <service verb="update" noun="OrderStatus">
        <in-parameters>
            <parameter name="orderId" required="true"/><parameter name="statusId" required="true"/>
            <parameter name="placedDate" type="Timestamp"/>
        </in-parameters>
        <out-parameters><parameter name="oldStatusId"/><parameter name="statusChanged" type="Boolean"/></out-parameters>
        <actions>
            <entity-find entity-name="mantle.order.OrderPart" list="orderPartList"><econdition field-name="orderId"/></entity-find>
            <iterate list="orderPartList" entry="orderPart">
                <service-call name="update#mantle.order.OrderPart" out-map="context"
                        in-map="[orderId:orderId, orderPartSeqId:orderPart.orderPartSeqId, statusId:statusId]"/>
            </iterate>
            <set field="updateMap" from="[orderId:orderId, statusId:statusId]"/>
            <if condition="placedDate != null"><script>updateMap.put('placedDate', placedDate)</script></if>
            <service-call name="update#mantle.order.OrderHeader" out-map="context" in-map="updateMap"/>
        </actions>
    </service>
    <service verb="propose" noun="Order">
        <implements service="mantle.order.OrderServices.change#OrderStatusInterface"/>
        <actions><service-call name="mantle.order.OrderServices.update#OrderStatus" out-map="context" in-map="context + [statusId:'OrderProposed']"/></actions>
    </service>
    <service verb="place" noun="Order" transaction="cache">
        <implements service="mantle.order.OrderServices.change#OrderStatusInterface"/>
        <actions><service-call name="mantle.order.OrderServices.update#OrderStatus" out-map="context" in-map="context + [statusId:'OrderPlaced', placedDate:ec.user.nowTimestamp]"/></actions>
    </service>
    <service verb="approve" noun="Order">
        <implements service="mantle.order.OrderServices.change#OrderStatusInterface"/>
        <actions><service-call name="mantle.order.OrderServices.update#OrderStatus" out-map="context" in-map="context + [statusId:'OrderApproved']"/></actions>
    </service>

    <service verb="complete" noun="OrderPart">
        <in-parameters><parameter name="orderId" required="true"/><parameter name="orderPartSeqId" required="true"/></in-parameters>
        <out-parameters><parameter name="oldStatusId"/><parameter name="statusChanged" type="Boolean"/></out-parameters>
        <actions>
            <service-call name="update#mantle.order.OrderPart" out-map="context"
                    in-map="[orderId:orderId, orderPartSeqId:orderPartSeqId, statusId:'OrderCompleted']"/>
            <set field="allComplete" from="true"/>
            <entity-find entity-name="mantle.order.OrderPart" list="orderPartList"><econdition field-name="orderId"/></entity-find>
            <iterate list="orderPartList" entry="orderPart">
                <if condition="orderPart.statusId != 'OrderCompleted'"><set field="allComplete" from="false"/></if>
            </iterate>
            <if condition="allComplete">
                <service-call name="update#mantle.order.OrderHeader" out-map="context"
                        in-map="[orderId:orderId, statusId:'OrderCompleted']"/>
            </if>
        </actions>
    </service>
    <service verb="complete" noun="Order">
        <implements service="mantle.order.OrderServices.change#OrderStatusInterface"/>
        <actions><service-call name="mantle.order.OrderServices.update#OrderStatus" out-map="context" in-map="context + [statusId:'OrderCompleted']"/></actions>
    </service>

    <service verb="cancel" noun="Order">
        <description>Call when customer cancels the order.</description>
        <implements service="mantle.order.OrderServices.change#OrderStatusInterface"/>
        <actions>
            <!-- TODO: do partial cancel if already partially shipped, and then set what is left as completed -->
            <entity-find entity-name="mantle.order.OrderPart" list="orderPartList"><econdition field-name="orderId"/></entity-find>
            <iterate list="orderPartList" entry="orderPart">
                <service-call name="update#mantle.order.OrderPart" out-map="context"
                        in-map="[orderId:orderId, orderPartSeqId:orderPart.orderPartSeqId, statusId:'OrderCancelled']"/>
            </iterate>

            <service-call name="update#mantle.order.OrderHeader" out-map="context"
                    in-map="[orderId:orderId, statusId:'OrderCancelled']"/>
        </actions>
    </service>
</services>
