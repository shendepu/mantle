<?xml version="1.0" encoding="UTF-8"?>
<!--
This Work is in the public domain and is provided on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied,
including, without limitation, any warranties or conditions of TITLE,
NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE.
You are solely responsible for determining the appropriateness of using
this Work and assume any risks associated with your use of this Work.

This Work includes contributions authored by David E. Jones, not as a
"work for hire", who hereby disclaims any copyright to the same.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-1.3.xsd">

<!-- STATUS: EXPERIMENTAL -->

    <!-- ========================== -->
    <!-- Tax Calculation Interfaces -->
    <!-- ========================== -->

    <service verb="calculate" noun="SalesTax" type="interface">
        <in-parameters>
            <parameter name="referenceId"><description>This is the orderId:orderPartSeqId or invoiceId, if available.</description></parameter>
            <parameter name="saveResults" type="Boolean"><description>If the tax service supports saving calculated
                taxes for reporting and filing with authorities set this flag when you want the results saved (this is
                usually done for invoices).</description></parameter>
            <parameter name="taxGatewayConfigId" required="true"/>
            <parameter name="customerPartyId"/>
            <parameter name="organizationPartyId"/>
            <parameter name="originAddressContactMechId"/>
            <parameter name="destinationAddressContactMechId"/>
            <parameter name="items" type="List"><parameter name="itemEntry" type="Map">
                <parameter name="itemId"/>
                <parameter name="itemTypeEnumId"/>
                <parameter name="quantity" type="BigDecimal"/>
                <parameter name="unitAmount" type="BigDecimal"/>
                <parameter name="productId"/>
                <parameter name="taxCode"/>
                <!-- discounts will be another item of type ItemDiscount, so don't do this for now:
                <parameter name="discounts" type="List"><parameter name="discountEntry" type="Map">
                    <parameter name="discountAmount" type="BigDecimal"/>
                    <parameter name="discountCode"/>
                </parameter></parameter>
                -->
                <!-- these may not be needed, we're doing one call per OrderPart anyway:
                <parameter name="originAddressContactMechId"/>
                <parameter name="destinationAddressContactMechId"/>
                -->
            </parameter></parameter>
        </in-parameters>
        <out-parameters>
            <parameter name="taxResults" type="List"><parameter name="taxResultEntry" type="Map">
                <parameter name="itemId"/>
                <parameter name="taxAmount" type="BigDecimal"/>
                <parameter name="taxRate" type="BigDecimal"/>
                <parameter name="geoName"/>
                <parameter name="authorityName"/>
                <parameter name="taxName"/>
            </parameter></parameter>
        </out-parameters>
    </service>

    <!-- ======================== -->
    <!-- Tax Calculation Services -->
    <!-- ======================== -->

    <service verb="calculate" noun="OrderSalesTax">
        <in-parameters>
            <parameter name="orderId" required="true"/>
            <parameter name="orderPartSeqId"/>
        </in-parameters>
        <actions>
            <entity-find-one entity-name="mantle.order.OrderHeader" value-field="orderHeader"/>
            <entity-find-related-one value-field="orderHeader" relationship-name="mantle.product.store.ProductStore"
                    to-value-field="productStore" cache="true"/>
            <entity-find-related-one value-field="productStore" relationship-name="mantle.other.tax.TaxGatewayConfig"
                    to-value-field="taxGatewayConfig" cache="true"/>
            <if condition="taxGatewayConfig == null">
                <return error="true" message="Cannot calculate tax for Order [${orderId}], not TaxGatewayConfig found (store: ${productStore?.productStoreId})"/>
            </if>

            <!-- if order part has tax (ItemSalesTax or ItemVatTax) items clear them out first -->
            <entity-delete-by-condition entity-name="mantle.order.OrderItem">
                <econdition field-name="orderId"/>
                <econdition field-name="itemTypeEnumId" operator="in" value="ItemSalesTax,ItemVatTax"/>
            </entity-delete-by-condition>

            <!-- build the parameters for the calculate#SalesTax interface -->
            <set field="saveResults" from="false"/><!-- don't save result for order, only for invoice -->
            <set field="taxGatewayConfigId" from="taxGatewayConfig.taxGatewayConfigId"/>
            <!-- get the inventory facility's PostalShippingOrigin contactMechId -->
            <entity-find entity-name="mantle.facility.FacilityContactMech" list="fromFcmList" cache="true">
                <date-filter/>
                <econdition field-name="facilityId" from="productStore.inventoryFacilityId"/>
                <econdition field-name="contactMechPurposeId" value="PostalShippingOrigin"/>
            </entity-find>
            <set field="fromFcm" from="fromFcmList?.first"/>

            <!-- loop through the OrderParts, or only single OrderPart if orderPartSeqId is specified -->
            <entity-find entity-name="mantle.order.OrderPart" list="orderPartList">
                <econdition field-name="orderId"/><econdition field-name="orderPartSeqId" ignore-if-empty="true"/>
            </entity-find>
            <iterate list="orderPartList" entry="orderPart">
                <set field="referenceId" value="${orderId}:${orderPart.orderPartSeqId}"/>
                <set field="customerPartyId" from="orderPart.customerPartyId"/>
                <set field="organizationPartyId" from="productStore.organizationPartyId"/>
                <set field="originAddressContactMechId" from="fromFcm?.contactMechId"/>
                <set field="destinationAddressContactMechId" from="orderPart.postalContactMechId"/>

                <entity-find entity-name="mantle.order.OrderItem" list="orderItemList">
                    <econdition field-name="orderId"/><econdition field-name="orderPartSeqId" from="orderPart.orderPartSeqId"/>
                </entity-find>
                <set field="items" from="[]"/>
                <iterate list="orderItemList" entry="orderItem">
                    <entity-find-related-one value-field="orderItem" relationship-name="mantle.product.Product"
                            to-value-field="product"/>
                    <if condition="!product?.taxable || product?.taxable == 'Y'">
                        <script>items.add([itemId:orderItem.orderItemSeqId, itemTypeEnumId:orderItem.itemTypeEnumId,
                                quantity:orderItem.quantity, unitAmount:orderItem.unitAmount,
                                productId:orderItem.productId, taxCode:product?.taxCode])</script>
                    </if>
                </iterate>

                <!-- call gateway (could be local) service to calculate shipping charges -->
                <service-call name="${taxGatewayConfig.calculateServiceName}" in-map="context" out-map="context"/>

                <!-- TODO: add tax child OrderItems to db -->
            </iterate>
        </actions>
    </service>
    <service verb="calculate" noun="InvoiceSalesTax">
        <in-parameters><parameter name="invoiceId" required="true"/></in-parameters>
        <actions>
            <!-- TODO: implement this... -->
        </actions>
    </service>

    <!-- ======================= -->
    <!-- Local Sales Tax Gateway -->
    <!-- ======================= -->
    
    <service verb="calculate" noun="SalesTaxLocal">
        <implements service="mantle.other.TaxServices.calculate#SalesTax"/>
        <actions>
            <log level="warn" message="Called calculate#SalesTaxLocal with context:\n ${context}"/>
            <!-- TODO: implement this... -->
        </actions>
    </service>
</services>
