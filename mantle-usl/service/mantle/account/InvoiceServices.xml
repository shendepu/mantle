<?xml version="1.0" encoding="UTF-8"?>
<!--
This Work is in the public domain and is provided on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied,
including, without limitation, any warranties or conditions of TITLE,
NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE.
You are solely responsible for determining the appropriateness of using
this Work and assume any risks associated with your use of this Work.

This Work includes contributions authored by David E. Jones, not as a
"work for hire", who hereby disclaims any copyright to the same.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-1.3.xsd">

<!-- STATUS: EXPERIMENTAL -->

    <service verb="get" noun="InvoiceTotal">
        <in-parameters><parameter name="invoiceId"/></in-parameters>
        <out-parameters>
            <parameter name="invoiceTotal" type="BigDecimal"/>
            <parameter name="appliedPaymentsTotal" type="BigDecimal"/>
            <parameter name="unpaidTotal" type="BigDecimal"/>
        </out-parameters>
        <actions>
            <entity-find entity-name="mantle.account.invoice.InvoiceItem" list="invoiceItemList">
                <econdition field-name="invoiceId"/>
            </entity-find>
            <set field="invoiceTotal" from="0"/>
            <iterate list="invoiceItemList" entry="invoiceItem">
                <set field="invoiceTotal" from="invoiceTotal + (invoiceItem.quantity * invoiceItem.amount)"/>
            </iterate>

            <entity-find entity-name="mantle.account.payment.PaymentApplication" list="paymentApplicationList">
                <econdition field-name="invoiceId"/>
            </entity-find>
            <set field="appliedPaymentsTotal" from="0"/>
            <iterate list="paymentApplicationList" entry="paymentApplication">
                <set field="appliedPaymentsTotal" from="appliedPaymentsTotal + paymentApplication.amountApplied"/>
            </iterate>

            <set field="unpaidTotal" from="invoiceTotal - appliedPaymentsTotal"/>
        </actions>
    </service>
    <service verb="get" noun="InvoicePrintInfo">
        <in-parameters><parameter name="invoiceId"/></in-parameters>
        <out-parameters>
            <parameter name="invoice" type="org.moqui.entity.EntityValue"/>
            <parameter name="currentStatus" type="org.moqui.entity.EntityValue"/>
            <parameter name="invoiceTotal" type="BigDecimal"/>
            <parameter name="appliedPaymentsTotal" type="BigDecimal"/>
            <parameter name="unpaidTotal" type="BigDecimal"/>

            <parameter name="invoiceItemList" type="List"><parameter name="entry" type="org.moqui.entity.EntityValue"/></parameter>
            <parameter name="itemTypeSummaryMapList" type="List"/>

            <parameter name="fromParty" type="org.moqui.entity.EntityValue"/>
            <parameter name="fromContactInfo" type="Map"><description>From the mantle.party.ContactServices.get#PartyContactInfo service.</description></parameter>
            <parameter name="toParty" type="org.moqui.entity.EntityValue"/>
            <parameter name="toContactInfo" type="Map"><description>From the mantle.party.ContactServices.get#PartyContactInfo service.</description></parameter>
            <parameter name="toBillingRep" type="org.moqui.entity.EntityValue"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.account.invoice.Invoice" value-field="invoice"/>
            <entity-find-one entity-name="moqui.basic.StatusItem" value-field="currentStatus">
                <field-map field-name="statusId" from="invoice?.statusId"/>
            </entity-find-one>
            <service-call name="mantle.account.InvoiceServices.get#InvoiceTotal" in-map="[invoiceId:invoiceId]" out-map="context"/>
            <entity-find-related-one value-field="invoice" relationship-name="mantle.account.invoice.SettlementTerm" to-value-field="settlementTerm"/>

            <entity-find entity-name="mantle.account.invoice.InvoiceItem" list="invoiceItemList">
                <econdition field-name="invoiceId"/>
            </entity-find>

            <!-- build itemTypeSummaryMapMap with itemTypeEnumId, amount (only for ItemTimeEntry), quantity, total -->
            <set field="itemTypeSummaryMapMap" from="[:]"/>
            <iterate list="invoiceItemList" entry="invoiceItem">
                <set field="mapKey" from="invoiceItem.itemTypeEnumId"/>
                <if condition="invoiceItem.itemTypeEnumId == 'ItemTimeEntry'"><set field="mapKey" from="mapKey + '::' + invoiceItem.amount"/></if>
                <set field="itemTypeSummaryMap" from="itemTypeSummaryMapMap.get(mapKey)"/>
                <if condition="!itemTypeSummaryMap">
                    <set field="itemTypeSummaryMap" from="[itemTypeEnumId:invoiceItem.itemTypeEnumId, quantity:0, total:0]"/>
                    <if condition="invoiceItem.itemTypeEnumId == 'ItemTimeEntry'"><set field="itemTypeSummaryMap.amount" from="invoiceItem.amount"/></if>
                    <script>itemTypeSummaryMapMap.put(mapKey, itemTypeSummaryMap)</script>
                </if>
                <set field="itemTypeSummaryMap.quantity" from="itemTypeSummaryMap.quantity + (invoiceItem.quantity?:1)"/>
                <set field="itemTypeSummaryMap.total" from="itemTypeSummaryMap.total + ((invoiceItem.quantity?:1) * invoiceItem.amount)"/>
            </iterate>
            <set field="itemTypeSummaryMapList" from="itemTypeSummaryMapMap.values()"/>

            <entity-find-one entity-name="mantle.party.PartyDetail" value-field="fromParty">
                <field-map field-name="partyId" from="invoice.fromPartyId"/>
            </entity-find-one>
            <service-call name="mantle.party.ContactServices.get#PartyContactInfo" out-map="fromContactInfo"
                    in-map="[partyId:invoice.fromPartyId, postalContactMechPurposeId:'PostalPayment',
                        telecomContactMechPurposeId:'PhonePayment', emailContactMechPurposeId:'EmailPayment']"/>

            <entity-find-one entity-name="mantle.party.PartyDetail" value-field="toParty">
                <field-map field-name="partyId" from="invoice.toPartyId"/>
            </entity-find-one>
            <service-call name="mantle.party.ContactServices.get#PartyContactInfo" out-map="toContactInfo"
                    in-map="[partyId:invoice.toPartyId, postalContactMechPurposeId:'PostalBilling',
                        telecomContactMechPurposeId:'PhoneBilling', emailContactMechPurposeId:'EmailBilling']"/>
            <entity-find entity-name="mantle.party.PartyRelationship" list="toBillingRelList">
                <date-filter/>
                <econdition field-name="toPartyId" from="invoice.toPartyId"/>
                <econdition field-name="relationshipTypeEnumId" value="PrtRepresentative"/>
                <econdition field-name="fromRoleTypeId" value="ClientBilling"/>
            </entity-find>
            <entity-find-one entity-name="mantle.party.PartyDetail" value-field="toBillingRep">
                <field-map field-name="partyId" from="toBillingRelList?.first?.fromPartyId"/>
            </entity-find-one>
        </actions>
    </service>

    <service verb="create" noun="EntireOrderPartInvoice">
        <!-- Invoice based on OrderPart (for non-shipping orders or orders invoiced before shipping) -->
        <in-parameters>
            <parameter name="orderId" required="true"/>
            <parameter name="orderPartSeqId" required="true"/>
            <parameter name="statusId"><description>If specified after create set to this statusId (always created
                initially in InvoiceInProcess or InvoiceIncoming, so there must be a transition to specified status).</description></parameter>
            <parameter name="invoiceDate" type="Timestamp" default="ec.user.nowTimestamp"/>
        </in-parameters>
        <out-parameters><parameter name="invoiceId"/></out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.order.OrderHeader" value-field="orderHeader"/>
            <entity-find-one entity-name="mantle.order.OrderPart" value-field="orderPart"/>

            <!-- is this an outgoing (use InvoiceIncoming) or incoming (use InvoiceInProcess) order based on internal org? -->
            <!-- TODO: what to do if both are internal orgs? need a flag or something for which side we're dealing with... just for initial statusId... -->
            <entity-find-one entity-name="mantle.party.PartyRole" value-field="customerOrgInternal">
                <field-map field-name="partyId" from="orderPart.customerPartyId"/><field-map field-name="roleTypeId" value="OrgInternal"/></entity-find-one>
            <set field="initialStatusId" from="customerOrgInternal ? 'InvoiceIncoming' : 'InvoiceInProcess'"/>

            <set field="description" value="Invoice for Order ${orderId} part ${orderPartSeqId}"/>
            <service-call name="create#mantle.account.invoice.Invoice" out-map="context"
                    in-map="[invoiceTypeEnumId:'InvoiceSales', statusId:initialStatusId,
                        fromPartyId:orderPart.vendorPartyId, toPartyId:orderPart.customerPartyId,
                        invoiceDate:invoiceDate, currencyUomId:orderHeader.currencyUomId,
                        description:description]"/>

            <entity-find entity-name="mantle.order.OrderItem" list="orderItemList">
                <econdition field-name="orderId"/><econdition field-name="orderPartSeqId"/>
                <order-by field-name="orderItemSeqId"/>
            </entity-find>
            <iterate list="orderItemList" entry="orderItem">
                <set field="oibBaseMap" from="[orderId:orderId, orderItemSeqId:orderItem.orderItemSeqId]"/>
                <entity-find entity-name="mantle.order.OrderItemBilling" list="orderItemBillingList">
                    <econdition-object field="oibBaseMap"/>
                </entity-find>
                <set field="quantityNotBilled" from="(orderItem.quantity ?: 1) * (orderItem.selectedAmount ?: 1)"/>
                <iterate list="orderItemBillingList" entry="orderItemBilling">
                    <set field="quantityNotBilled" from="quantityNotBilled - orderItemBilling.quantity"/>
                </iterate>
                <if condition="quantityNotBilled &gt; 0">
                    <!-- create InvoiceItem -->
                    <!-- is prorate by quantity needed? -->
                    <service-call name="create#mantle.account.invoice.InvoiceItem" out-map="iiOut"
                            in-map="[invoiceId:invoiceId, itemTypeEnumId:orderItem.itemTypeEnumId ?: 'ItemSales',
                                amount:orderItem.unitAmount, description:orderItem.itemDescription,
                                quantity:quantityNotBilled, quantityUomId:orderItem.quantityUomId,
                                productId:orderItem.productId, itemDate:orderHeader.placedDate]"/>

                    <!-- for ShipmentItemSource set the invoiceId/invoiceItemSeqId on it -->
                    <set field="quantityNotShipSourced" from="quantityNotBilled"/>
                    <set field="curShipmentId" from="null"/>
                    <entity-find entity-name="mantle.shipment.ShipmentItemSource" list="shipmentItemSourceList">
                        <econdition field-name="orderId"/><econdition field-name="orderItemSeqId" from="orderItem.orderItemSeqId"/>
                    </entity-find>
                    <iterate list="shipmentItemSourceList" entry="shipmentItemSource">
                        <if condition="!shipmentItemSource.invoiceId &amp;&amp; quantityNotShipSourced >= shipmentItemSource.quantity">
                            <set field="shipmentItemSource.invoiceId" from="invoiceId"/>
                            <set field="shipmentItemSource.invoiceItemSeqId" from="iiOut.invoiceItemSeqId"/>
                            <entity-update value-field="shipmentItemSource"/>
                            <set field="quantityNotShipSourced" from="quantityNotShipSourced - shipmentItemSource.quantity"/>
                            <set field="curShipmentId" from="shipmentItemSource.shipmentId"/>
                        </if>
                    </iterate>
                    <!-- if quantityNotShipSourced > 0 do anything here? we don't have another Shipment/Item with quantity to match... -->

                    <!-- now create OrderItemBilling with shipmentId if available -->
                    <service-call name="create#mantle.order.OrderItemBilling"
                            in-map="oibBaseMap + [invoiceId:invoiceId, invoiceItemSeqId:iiOut.invoiceItemSeqId,
                                amount:orderItem.unitAmount, quantity:quantityNotBilled, shipmentId:curShipmentId]"/>
                </if>
            </iterate>

            <if condition="statusId">
                <service-call name="update#mantle.account.invoice.Invoice" in-map="[invoiceId:invoiceId, statusId:statusId]"/>
            </if>
        </actions>
    </service>

    <!-- Invoices based on Shipment -->
    <service verb="create" noun="SalesShipmentInvoices">
        <in-parameters>
            <parameter name="shipmentId" required="true"/>
            <parameter name="statusId"><description>If specified after create set to this statusId (always created
                initially in InvoiceInProcess, so there must be a transition to specified status).</description></parameter>
            <parameter name="invoiceDate" type="Timestamp" default="ec.user.nowTimestamp"/>
        </in-parameters>
        <out-parameters><parameter name="invoiceIdByOrderPartIdMap" type="Map"/></out-parameters>
        <actions>
            <set field="invoiceIdByOrderPartIdMap" from="[:]"/>

            <entity-find entity-name="mantle.shipment.ShipmentItemSource" list="shipmentItemSourceList" for-update="true">
                <econdition field-name="shipmentId"/>
                <econdition field-name="invoiceId" from="null"/><!-- exclude items already invoiced -->
                <econdition field-name="orderId" operator="not-equals" from="null"/><!-- only include item sources from orders -->
                <!-- NOTE: Derby blows up with for-update and order-by: <order-by field-name="orderId"/><order-by field-name="orderItemSeqId"/> -->
            </entity-find>
            <order-map-list list="shipmentItemSourceList"><order-by field-name="orderId"/><order-by field-name="orderItemSeqId"/></order-map-list>

            <iterate list="shipmentItemSourceList" entry="shipmentItemSource">
                <set field="orderItem" from="shipmentItemSource.'mantle.order.OrderItem'"/>
                <if condition="orderItem &amp;&amp; !shipmentItemSource.invoiceId">
                    <set field="invoiceId" from="invoiceIdByOrderPartIdMap[orderItem.orderId + ':' + orderItem.orderPartSeqId]"/>
                    <if condition="!invoiceId">
                        <!-- find the OrderPart for the from/toPartyId, etc -->
                        <set field="orderPart" from="orderItem.'mantle.order.OrderPart'"/>
                        <if condition="orderPart">
                            <set field="orderHeader" from="shipmentItemSource.'mantle.order.OrderHeader'"/>
                            <set field="description" value="Invoice for Order ${orderItem.orderId} part ${orderItem.orderPartSeqId} and Shipment ${shipmentId}"/>
                            <service-call name="create#mantle.account.invoice.Invoice" out-map="invOut"
                                    in-map="[invoiceTypeEnumId:'InvoiceSales', statusId:'InvoiceInProcess',
                                        fromPartyId:orderPart.vendorPartyId, toPartyId:orderPart.customerPartyId,
                                        invoiceDate:invoiceDate, currencyUomId:orderHeader.currencyUomId,
                                        description:description]"/>
                            <set field="invoiceId" from="invOut.invoiceId"/>
                            <script>invoiceIdByOrderPartIdMap.put(orderItem.orderId + ':' + orderItem.orderPartSeqId, invoiceId)</script>
                        </if>
                    </if>
                    <if condition="invoiceId">
                        <!-- create InvoiceItem, OrderItemBilling, set invoiceId,invoiceItemSeqId -->
                        <service-call name="create#mantle.account.invoice.InvoiceItem" out-map="iiOut"
                                in-map="[invoiceId:invoiceId, itemTypeEnumId:orderItem.itemTypeEnumId ?: 'ItemProduct',
                                    amount:orderItem.unitAmount, description:orderItem.itemDescription,
                                    quantity:(shipmentItemSource.quantity * (orderItem.selectedAmount ?: 1)),
                                    quantityUomId:orderItem.quantityUomId, productId:orderItem.productId,
                                    itemDate:orderHeader.placedDate]"/>
                        <entity-find entity-name="mantle.product.issuance.AssetIssuance" list="assetIssuanceList">
                            <econdition-object field="[orderId:orderItem.orderId, orderItemSeqId:orderItem.orderItemSeqId,
                                    shipmentId:shipmentId]"/>
                        </entity-find>
                        <iterate list="assetIssuanceList" entry="assetIssuance">
                            <!-- should we make sure the total quantity on all AssetIssuance records matches the
                                quantity on the ShipmentItemSource record? that should be handled when they are created... -->
                            <service-call name="create#mantle.order.OrderItemBilling"
                                    in-map="[orderId:orderItem.orderId, orderItemSeqId:orderItem.orderItemSeqId,
                                        invoiceId:invoiceId, invoiceItemSeqId:iiOut.invoiceItemSeqId,
                                        assetIssuanceId:assetIssuance.assetIssuanceId, shipmentId:shipmentId,
                                        amount:orderItem.unitAmount, quantity:assetIssuance.quantity]"/>
                        </iterate>
                        
                        <set field="shipmentItemSource.invoiceId" from="invoiceId"/>
                        <set field="shipmentItemSource.invoiceItemSeqId" from="iiOut.invoiceItemSeqId"/>
                        <entity-update value-field="shipmentItemSource"/>

                        <!-- also invoice child OrderItems (adjustments, etc) -->
                        <set field="childOrderItemList" from="orderItem.'Child#mantle.order.OrderItem'"/>
                        <iterate list="childOrderItemList" entry="childOrderItem">
                            <!-- only ship if no productId, that should be shipped before invoiced -->
                            <if condition="!childOrderItem.productId">
                                <set field="oibBaseMap" from="[orderId:childOrderItem.orderId,
                                    orderItemSeqId:childOrderItem.orderItemSeqId]"/>
                                <entity-find entity-name="mantle.order.OrderItemBilling" list="orderItemBillingList">
                                    <econdition-object field="oibBaseMap"/>
                                </entity-find>
                                <if condition="!orderItemBillingList">
                                    <!-- is prorate by quantity needed? -->
                                    <service-call name="create#mantle.account.invoice.InvoiceItem" out-map="iiOut"
                                            in-map="[invoiceId:invoiceId, itemTypeEnumId:(childOrderItem.itemTypeEnumId ?: 'ItemSales'),
                                                amount:childOrderItem.unitAmount, description:childOrderItem.itemDescription,
                                                quantity:((childOrderItem.quantity ?: 1) * (childOrderItem.selectedAmount ?: 1)),
                                                quantityUomId:childOrderItem.quantityUomId, itemDate:orderHeader.placedDate]"/>
                                    <service-call name="create#mantle.order.OrderItemBilling"
                                            in-map="oibBaseMap + [invoiceId:invoiceId, invoiceItemSeqId:iiOut.invoiceItemSeqId,
                                                shipmentId:shipmentId, amount:childOrderItem.unitAmount,
                                                quantity:((childOrderItem.quantity ?: 1) * (childOrderItem.selectedAmount ?: 1))]"/>
                                </if>
                            </if>
                        </iterate>
                    </if>
                </if>
            </iterate>

            <!-- for each order invoice uninvoiced, non-Product OrderItems such as shipping charges, etc... -->
            <!-- do all on first invoice... in the future consider prorating by total on this shipment versus order total -->
            <iterate list="invoiceIdByOrderPartIdMap.entrySet()" entry="invoiceIdByOrderIdEntry">
                <set field="orderAndPartId" from="invoiceIdByOrderIdEntry.key"/>
                <set field="orderId" from="orderAndPartId.substring(0, orderAndPartId.indexOf(':'))"/>
                <set field="orderPartSeqId" from="orderAndPartId.substring(orderAndPartId.indexOf(':') + 1)"/>
                <set field="invoiceId" from="invoiceIdByOrderIdEntry.value"/>
                <entity-find-one entity-name="mantle.order.OrderHeader" value-field="orderHeader"/>
                <entity-find entity-name="mantle.order.OrderItem" list="otherOrderItemList">
                    <econdition field-name="orderId"/><econdition field-name="orderPartSeqId"/>
                    <econdition field-name="productId" from="null"/><econdition field-name="parentItemSeqId" from="null"/>
                </entity-find>
                <iterate list="otherOrderItemList" entry="otherOrderItem">
                    <set field="oibBaseMap" from="[orderId:otherOrderItem.orderId, orderItemSeqId:otherOrderItem.orderItemSeqId]"/>
                    <entity-find entity-name="mantle.order.OrderItemBilling" list="orderItemBillingList">
                        <econdition-object field="oibBaseMap"/>
                    </entity-find>
                    <if condition="!orderItemBillingList">
                        <!-- is prorate by quantity needed? -->
                        <service-call name="create#mantle.account.invoice.InvoiceItem" out-map="iiOut"
                                in-map="[invoiceId:invoiceId, itemTypeEnumId:otherOrderItem.itemTypeEnumId ?: 'ItemSales',
                                    amount:otherOrderItem.unitAmount, description:otherOrderItem.itemDescription,
                                    quantity:((otherOrderItem.quantity ?: 1) * (otherOrderItem.selectedAmount ?: 1)),
                                    quantityUomId:otherOrderItem.quantityUomId, itemDate:orderHeader.placedDate]"/>
                        <service-call name="create#mantle.order.OrderItemBilling"
                                in-map="oibBaseMap + [invoiceId:invoiceId, invoiceItemSeqId:iiOut.invoiceItemSeqId,
                                    shipmentId:shipmentId, amount:otherOrderItem.unitAmount,
                                    quantity:((otherOrderItem.quantity ?: 1) * (otherOrderItem.selectedAmount ?: 1))]"/>
                    </if>
                </iterate>
            </iterate>

            <!-- set invoice status -->
            <if condition="statusId"><iterate list="invoiceIdByOrderPartIdMap.values()" entry="invoiceId">
                <service-call name="update#mantle.account.invoice.Invoice" in-map="[invoiceId:invoiceId, statusId:statusId]"/>
            </iterate></if>
            
            <!-- apply order payments to new invoices -->
            <iterate list="invoiceIdByOrderPartIdMap.entrySet()" entry="invoiceIdByOrderIdEntry">
                <set field="orderAndPartId" from="invoiceIdByOrderIdEntry.key"/>
                <set field="orderId" from="orderAndPartId.substring(0, orderAndPartId.indexOf(':'))"/>
                <set field="orderPartSeqId" from="orderAndPartId.substring(orderAndPartId.indexOf(':') + 1)"/>
                <set field="invoiceId" from="invoiceIdByOrderIdEntry.value"/>
                <service-call name="mantle.account.PaymentServices.apply#OrderPaymentsToInvoice"
                        in-map="[orderId:orderId, orderPartSeqId:orderPartSeqId, invoiceId:invoiceId]"/>
            </iterate>
        </actions>
    </service>
    <service verb="create" noun="SalesReturnShipmentInvoices">
        <in-parameters><parameter name="shipmentId" required="true"/></in-parameters>
        <out-parameters><parameter name="invoiceIdList" type="List"/></out-parameters>
        <actions>
            <!-- TODO: try genericizing create#SalesShipmentInvoices instead of implementing this -->

            <set field="invoiceIdList" from="[]"/>
            <!-- TODO: implement this... create invoices -->
            <!-- TODO: exclude OrderItem received quantities that are already invoiced (OrderItemBilling) -->
        </actions>
    </service>
    <service verb="create" noun="PurchaseShipmentInvoices">
        <in-parameters><parameter name="shipmentId" required="true"/></in-parameters>
        <out-parameters><parameter name="invoiceIdList" type="List"/></out-parameters>
        <actions>
            <!-- TODO: try genericizing create#SalesShipmentInvoices instead of implementing this -->

            <set field="invoiceIdList" from="[]"/>
            <!-- TODO: implement this... create invoices -->
            <!-- TODO: exclude OrderItems received that are already invoiced -->
        </actions>
    </service>

    <service verb="create" noun="ProjectExpenseInvoice">
        <in-parameters>
            <auto-parameters entity-name="mantle.account.invoice.Invoice" include="nonpk"/>
            <parameter name="workEffortId"/>
            <parameter name="fromPartyId" required="true"/>
            <parameter name="toPartyId"/>
            <parameter name="invoiceTypeEnumId" default-value="InvoiceSales"/>
            <parameter name="statusId" default-value="InvoiceIncoming"/>
            <parameter name="invoiceDate" type="Timestamp" default="ec.user.nowTimestamp"/>
            <parameter name="currencyUomId"/>
        </in-parameters>
        <out-parameters>
            <parameter name="invoiceId"/>
        </out-parameters>
        <actions>
            <if condition="!workEffortId &amp;&amp; !toPartyId">
                <return error="true" message="Must specify either Project (workEffortId) or To Party (toPartyId)"/>
            </if>

            <if condition="!currencyUomId">
                <entity-find-one entity-name="mantle.ledger.config.PartyAcctgPreference" value-field="partyAcctgPreference">
                    <field-map field-name="organizationPartyId" from="toPartyId"/>
                </entity-find-one>
                <set field="currencyUomId" from="partyAcctgPreference?.baseCurrencyUomId ?: 'USD'"/>
            </if>
            <if condition="!toPartyId">
                <entity-find entity-name="mantle.work.effort.WorkEffortParty" list="vendorWepList">
                    <date-filter/><econdition field-name="workEffortId"/>
                    <econdition field-name="roleTypeId" value="VendorBillFrom"/>
                </entity-find>
                <set field="vendorWep" from="vendorWepList?.first"/>
                <set field="toPartyId" from="vendorWep.partyId"/>
            </if>

            <service-call name="create#mantle.account.invoice.Invoice" in-map="context" out-map="context"/>

            <if condition="workEffortId">
                <service-call name="create#mantle.work.effort.WorkEffortInvoice" in-map="context" out-map="context"/>
            </if>
        </actions>
    </service>

    <service verb="create" noun="ProjectInvoiceItems">
        <in-parameters>
            <parameter name="invoiceId"><description>If specified add item(s) to this Invoice. If empty an Invoice will be created.</description></parameter>
            <parameter name="workEffortId" required="true"/>
            <parameter name="thruDate" type="Timestamp" default="ec.user.nowTimestamp">
                <description>Only TimeEntry records before this date will be included. Defaults to now.</description></parameter>
            <parameter name="invoiceDate" type="Timestamp" default="ec.user.nowTimestamp"/>
            <parameter name="currencyUomId"/>
            <parameter name="ratePurposeEnumId" default-value="RaprClient"/>
            <parameter name="workerPartyId"><description>If specified only include time entries and expenses from this Party.</description></parameter>
        </in-parameters>
        <out-parameters>
            <parameter name="invoiceId"/>
            <parameter name="invoiceItemCreatedCount" type="Long"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.work.effort.WorkEffort" value-field="workEffort"/>
            <entity-find entity-name="mantle.work.effort.WorkEffortParty" list="billToList">
                <date-filter/><econdition field-name="workEffortId"/>
                <econdition field-name="roleTypeId" value="CustomerBillTo"/>
            </entity-find>
            <set field="billToWep" from="billToList ? billToList[0] : null"/>
            <entity-find entity-name="mantle.work.effort.WorkEffortParty" list="billFromList">
                <date-filter/><econdition field-name="workEffortId"/>
                <econdition field-name="roleTypeId" value="VendorBillFrom"/>
            </entity-find>
            <set field="billFromWep" from="billFromList ? billFromList[0] : null"/>

            <entity-find-one entity-name="mantle.party.PartyDetail" value-field="workerParty">
                <field-map field-name="partyId" from="workerPartyId"/>
            </entity-find-one>

            <!-- create Invoice associated with WorkEffort, use WorkEffortParty to find from/to parties -->
            <if condition="!invoiceId">
                <if condition="!currencyUomId">
                    <entity-find-one entity-name="mantle.ledger.config.PartyAcctgPreference" value-field="partyAcctgPreference">
                        <field-map field-name="organizationPartyId" from="ratePurposeEnumId == 'RaprClient' ? billToWep?.partyId : billFromWep?.partyId"/>
                    </entity-find-one>
                    <set field="currencyUomId" from="partyAcctgPreference?.baseCurrencyUomId ?: 'USD'"/>
                </if>
                <set field="description" value="Invoice for ${workEffort ? 'project' + workEffort.workEffortName + ' [' + workEffortId + ']' : ''} ${workerParty ? 'worker' + workerParty.firstName?:'' + ' ' + workerParty.lastName?:'' + workerParty.organizationName?:'' + ' [' + workerPartyId + ']' : ''}"/>
                <if condition="ratePurposeEnumId == 'RaprClient'">
                    <service-call name="create#mantle.account.invoice.Invoice" out-map="context"
                            in-map="[invoiceTypeEnumId:'InvoiceSales', statusId:'InvoiceInProcess',
                                fromPartyId:billFromWep?.partyId, toPartyId:billToWep?.partyId,
                                invoiceDate:invoiceDate, currencyUomId:currencyUomId, description:description]"/>

                    <else>
                        <service-call name="create#mantle.account.invoice.Invoice" out-map="context"
                                in-map="[invoiceTypeEnumId:'InvoiceSales', statusId:'InvoiceIncoming',
                                    fromPartyId:workerPartyId, toPartyId:billFromWep?.partyId,
                                    invoiceDate:invoiceDate, currencyUomId:currencyUomId, description:description]"/>
                    </else>
                </if>
            </if>

            <!-- iterate through task WorkEffort records and add to Invoice with create#TimeEntryInvoiceItems service -->
            <!-- TODO: consider refactoring to query TimeEntry records by project workEffortId and workerPartyId
                instead of doing a query for each task (was original approach when before workerPartyId support and
                making project workEffortId optional -->
            <entity-find entity-name="mantle.work.effort.WorkEffort" list="taskWorkEffortList">
                <econdition field-name="rootWorkEffortId" from="workEffortId" ignore-if-empty="true"/>
                <econdition field-name="workEffortTypeEnumId" value="WetTask"/>
                <order-by field-name="workEffortId"/>
            </entity-find>
            <set field="invoiceItemCreatedCount" from="0" type="Long"/>
            <iterate list="taskWorkEffortList" entry="taskWorkEffort">
                <service-call name="mantle.account.InvoiceServices.create#TimeEntryInvoiceItems" out-map="createResult"
                        in-map="[invoiceId:invoiceId, workEffortId:taskWorkEffort.workEffortId, thruDate:thruDate,
                        currencyUomId:currencyUomId, ratePurposeEnumId:ratePurposeEnumId, workerPartyId:workerPartyId]"/>
                <set field="invoiceItemCreatedCount" from="invoiceItemCreatedCount + createResult.invoiceItemCreatedCount"/>
            </iterate>

            <!-- add items for all expense invoice items for project that are not yet billed through -->
            <if condition="ratePurposeEnumId == 'RaprClient'">
                <entity-find entity-name="mantle.work.effort.WorkEffortInvoiceDetail" list="weidList">
                    <econdition field-name="workEffortId" ignore-if-empty="true"/>
                    <econdition field-name="statusId" value="InvoicePmtSent"/>
                    <econdition field-name="invoiceDate" operator="less-equals" from="thruDate"/>
                    <!-- don't include invoices to project CustomerBillTo partyId -->
                    <econdition field-name="toPartyId" operator="not-equals" from="billToWep.partyId"/>
                    <!-- don't include invoices from project VendorBillFrom partyId -->
                    <econdition field-name="fromPartyId" operator="not-equals" from="billFromWep.partyId"/>
                    <!-- filter by workerPartyId if specified, will be the fromPartyId on an expense invoice -->
                    <econdition field-name="fromPartyId" from="workerPartyId" ignore-if-empty="true"/>
                    <order-by field-name="-invoiceDate"/>
                </entity-find>
                <iterate list="weidList" entry="weid">
                    <!-- create invoice items and InvoiceItemAssocs, set invoice statusId -->
                    <service-call name="mantle.account.InvoiceServices.create#InvoiceBillThroughItems"
                            in-map="[originalInvoiceId:weid.invoiceId, newInvoiceId:invoiceId]" out-map="createResult"/>
                    <set field="invoiceItemCreatedCount" from="invoiceItemCreatedCount + createResult.invoiceItemCreatedCount"/>
                    <service-call name="update#mantle.account.invoice.Invoice"
                            in-map="[invoiceId:weid.invoiceId, statusId:'InvoiceBilledThrough']"/>
                </iterate>
            </if>

            <if condition="invoiceItemCreatedCount == 0">
                <message error="true">No time entries or expenses found for Project [${workEffortId}], not creating invoice or adding items to existing invoice.</message>

                <else>
                    <message>Added ${invoiceItemCreatedCount} items to Invoice ${invoiceId}</message>
                </else>
            </if>
        </actions>
    </service>

    <!-- InvoiceItems based on TimeEntry -->
    <service verb="create" noun="TimeEntryInvoiceItems">
        <in-parameters>
            <parameter name="invoiceId" required="true"/>
            <parameter name="workEffortId"><description>If specified get TimeEntry records constrained on it. Generally a task ID.</description></parameter>
            <parameter name="timesheetId"><description>If specified get TimeEntry records constrained on it.</description></parameter>
            <parameter name="thruDate" type="Timestamp" default="ec.user.nowTimestamp">
                <description>Only TimeEntry records before this date will be included. Defaults to now.</description></parameter>
            <parameter name="createSingleItem" type="Boolean" default-value="false"/>
            <parameter name="currencyUomId" default-value="USD"/>
            <parameter name="ratePurposeEnumId" default-value="RaprClient"/>
            <parameter name="workerPartyId"><description>If specified only include time entries from this Party.</description></parameter>
        </in-parameters>
        <out-parameters>
            <parameter name="invoiceItemCreatedCount" type="Long"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.work.effort.WorkEffort" value-field="workEffort"/>

            <if condition="ratePurposeEnumId == 'RaprVendor'">
                <set field="timeEntryInvoiceCondition" from="[vendorInvoiceId:null]"/>
                <else><set field="timeEntryInvoiceCondition" from="[invoiceId:null]"/></else>
            </if>
            <entity-find entity-name="mantle.work.time.TimeEntry" list="timeEntryList">
                <econdition-object field="timeEntryInvoiceCondition"/>
                <econdition field-name="workEffortId" ignore-if-empty="true"/>
                <econdition field-name="timesheetId" ignore-if-empty="true"/>
                <econditions combine="or">
                    <econdition field-name="thruDate" operator="less-equals" from="thruDate"/>
                    <econdition field-name="thruDate" from="null"/>
                </econditions>
                <!-- filter by workerPartyId if specified -->
                <econdition field-name="partyId" from="workerPartyId" ignore-if-empty="true"/>
            </entity-find>

            <!-- always use ItemTimeEntry, posts to sales/revenue for outgoing invoice and cost of sales for incoming invoice -->
            <set field="itemTypeEnumId" value="ItemTimeEntry"/>
            <set field="invoiceItemCreatedCount" from="0" type="Long"/>
            <if condition="createSingleItem">
                <set field="amountTotal" from="0"/>
                <iterate list="timeEntryList" entry="timeEntry">
                    <set field="rateAmountId" from="ratePurposeEnumId == 'RaprVendor' ? timeEntry.vendorRateAmountId : timeEntry.rateAmountId"/>

                    <if condition="rateAmountId">
                        <entity-find-one entity-name="mantle.humanres.rate.RateAmount" value-field="rateAmount" cache="true">
                            <field-map field-name="rateAmountId"/>
                        </entity-find-one>

                        <else>
                            <service-call name="mantle.work.TimeServices.get#TimeEntryRate" out-map="getTerOut"
                                    in-map="[timeEntryId:timeEntry.timeEntryId]"/>
                            <!-- set the values in the timeEntry record for use below since the service updates the DB record and we don't want to re-query to get it -->
                            <set field="timeEntry.rateAmountId" from="getTerOut.rateAmountId"/>
                            <set field="timeEntry.vendorRateAmountId" from="getTerOut.vendorRateAmountId"/>

                            <set field="rateAmountId" from="ratePurposeEnumId == 'RaprVendor' ? getTerOut.vendorRateAmountId : getTerOut.rateAmountId"/>
                            <entity-find-one entity-name="mantle.humanres.rate.RateAmount" value-field="rateAmount" cache="true">
                                <field-map field-name="rateAmountId"/>
                            </entity-find-one>
                        </else>
                    </if>
                    <if condition="rateAmount"><set field="amountTotal" from="amountTotal + (timeEntry.hours*rateAmount.rateAmount)"/></if>
                </iterate>
                <if condition="amountTotal">
                    <set field="description" value="Time entries for task ${workEffort.workEffortName} [${workEffortId}]"/>
                    <service-call name="create#mantle.account.invoice.InvoiceItem" out-map="iiOut"
                            in-map="[invoiceId:invoiceId, itemTypeEnumId:itemTypeEnumId,
                                amount:amountTotal, quantity:1, description:description]"/>
                    <set field="invoiceItemCreatedCount" from="invoiceItemCreatedCount + 1"/>

                    <iterate list="timeEntryList" entry="timeEntry">
                        <set field="rateAmountId" from="ratePurposeEnumId == 'RaprVendor' ? timeEntry.vendorRateAmountId : timeEntry.rateAmountId"/>
                        <if condition="rateAmountId">
                            <if condition="ratePurposeEnumId == 'RaprVendor'">
                                <set field="timeEntry.vendorInvoiceId" from="invoiceId"/>
                                <set field="timeEntry.vendorInvoiceItemSeqId" from="iiOut.invoiceItemSeqId"/>

                                <else>
                                    <set field="timeEntry.invoiceId" from="invoiceId"/>
                                    <set field="timeEntry.invoiceItemSeqId" from="iiOut.invoiceItemSeqId"/>
                                </else>
                            </if>
                            <entity-update value-field="timeEntry"/>
                        </if>
                    </iterate>
                </if>


                <else>
                    <iterate list="timeEntryList" entry="timeEntry">
                        <set field="rateAmountId" from="ratePurposeEnumId == 'RaprVendor' ? timeEntry.vendorRateAmountId : timeEntry.rateAmountId"/>

                        <if condition="rateAmountId">
                            <entity-find-one entity-name="mantle.humanres.rate.RateAmount" value-field="rateAmount" cache="true">
                                <field-map field-name="rateAmountId"/>
                            </entity-find-one>

                            <else>
                                <service-call name="mantle.work.TimeServices.get#TimeEntryRate" out-map="getTerOut"
                                        in-map="[timeEntryId:timeEntry.timeEntryId]"/>
                                <set field="rateAmountId" from="ratePurposeEnumId == 'RaprVendor' ? getTerOut.vendorRateAmountId : getTerOut.rateAmountId"/>
                                <entity-find-one entity-name="mantle.humanres.rate.RateAmount" value-field="rateAmount" cache="true">
                                    <field-map field-name="rateAmountId"/>
                                </entity-find-one>
                            </else>
                        </if>

                        <if condition="rateAmount">
                            <service-call name="create#mantle.account.invoice.InvoiceItem" out-map="iiOut"
                                    in-map="[invoiceId:invoiceId, itemTypeEnumId:itemTypeEnumId,
                                        amount:rateAmount.rateAmount, quantity:timeEntry.hours, description:timeEntry.comments,
                                        itemDate:timeEntry.fromDate]"/>
                            <set field="invoiceItemCreatedCount" from="invoiceItemCreatedCount + 1"/>

                            <if condition="ratePurposeEnumId == 'RaprVendor'">
                                <set field="timeEntry.vendorInvoiceId" from="invoiceId"/>
                                <set field="timeEntry.vendorInvoiceItemSeqId" from="iiOut.invoiceItemSeqId"/>

                                <else>
                                    <set field="timeEntry.invoiceId" from="invoiceId"/>
                                    <set field="timeEntry.invoiceItemSeqId" from="iiOut.invoiceItemSeqId"/>
                                </else>
                            </if>
                            <entity-update value-field="timeEntry"/>
                        </if>
                    </iterate>
                </else>
            </if>
        </actions>
    </service>

    <service verb="create" noun="InvoiceBillThroughItems">
        <in-parameters>
            <parameter name="originalInvoiceId" required="true"/>
            <parameter name="newInvoiceId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="invoiceItemCreatedCount" type="Long"/>
        </out-parameters>
        <actions>
            <set field="invoiceItemCreatedCount" from="0" type="Long"/>

            <entity-find-one entity-name="mantle.account.invoice.Invoice" value-field="originalInvoice">
                <field-map field-name="invoiceId" from="originalInvoiceId"/>
            </entity-find-one>
            <entity-find entity-name="mantle.account.invoice.InvoiceItem" list="originalInvoiceItemList">
                <econdition field-name="invoiceId" from="originalInvoiceId"/>
            </entity-find>
            <iterate list="originalInvoiceItemList" entry="originalInvoiceItem">
                <!-- if there is a TimeEntry with this as a vendor InvoiceItem skip it so it isn't double billed (and at the incorrect rate) -->
                <entity-find entity-name="mantle.work.time.TimeEntry" list="timeEntryList">
                    <econdition field-name="vendorInvoiceId" from="originalInvoiceItem.invoiceId"/>
                    <econdition field-name="vendorInvoiceItemSeqId" from="originalInvoiceItem.invoiceItemSeqId"/>
                </entity-find>
                <if condition="!timeEntryList">
                    <!-- create new InvoiceItem -->
                    <service-call name="create#mantle.account.invoice.InvoiceItem" out-map="iiOut"
                            in-map="[invoiceId:newInvoiceId, itemTypeEnumId:originalInvoiceItem.itemTypeEnumId,
                                amount:originalInvoiceItem.amount, quantity:originalInvoiceItem.quantity,
                                description:originalInvoiceItem.description,
                                itemDate:(originalInvoiceItem.itemDate ?: originalInvoice.invoiceDate)]"/>
                    <set field="invoiceItemCreatedCount" from="invoiceItemCreatedCount + 1"/>
                    <!-- create InvoiceItemAssoc between original and new -->
                    <service-call name="create#mantle.account.invoice.InvoiceItemAssoc"
                            in-map="[invoiceId:originalInvoiceItem.invoiceId, invoiceItemSeqId:originalInvoiceItem.invoiceItemSeqId,
                                toInvoiceId:newInvoiceId, toInvoiceItemSeqId:iiOut.invoiceItemSeqId,
                                invoiceItemAssocTypeEnumId:'IiatBillThrough', amount:originalInvoiceItem.amount,
                                quantity:originalInvoiceItem.quantity]"/>
                </if>
            </iterate>
        </actions>
    </service>
</services>
