<?xml version="1.0" encoding="UTF-8"?>
<!--
This Work is in the public domain and is provided on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied,
including, without limitation, any warranties or conditions of TITLE,
NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE.
You are solely responsible for determining the appropriateness of using
this Work and assume any risks associated with your use of this Work.

This Work includes contributions authored by David E. Jones, not as a
"work for hire", who hereby disclaims any copyright to the same.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-1.3.xsd">
    <service verb="find" noun="Party" type="script"
             location="component://mantle-usl/service/mantle/party/PartyServices/findParty.groovy">
        <in-parameters>
            <parameter name="partyTypeEnumId"/>
            <parameter name="roleTypeId"/>
            <parameter name="username"/>

            <parameter name="combinedName"/>
            <parameter name="organizationName"/>
            <parameter name="firstName"/><parameter name="lastName"/>

            <parameter name="address1"/><parameter name="address2"/>
            <parameter name="city"/><parameter name="stateProvinceGeoId"/><parameter name="postalCode"/>

            <parameter name="countryCode"/><parameter name="areaCode"/><parameter name="contactNumber"/>

            <parameter name="emailAddress"/>

            <parameter name="assetSerialNumber"/>
            <parameter name="contactOwnerPartyId"/>

            <parameter name="orderByField"/>
            <parameter name="pageIndex" type="Integer" default-value="0"/>
            <parameter name="pageSize" type="Integer" default-value="20"/>
            <parameter name="pageNoLimit" type="Boolean" default-value="false"/>
        </in-parameters>
        <out-parameters>
            <parameter name="partyIdList" type="List"/>
            <parameter name="totalResults" type="Integer"/>
        </out-parameters>
    </service>
    <service verb="search" noun="Person">
        <in-parameters><parameter name="term"/></in-parameters>
        <out-parameters><parameter name="outList" type="List"/></out-parameters>
        <actions>
            <entity-find entity-name="mantle.party.PersonAndUserAccount" list="pauList" limit="20">
                <econditions combine="or">
                    <econdition field-name="firstName" operator="like" value="%${term}%" ignore-case="true"/>
                    <econdition field-name="lastName" operator="like" value="%${term}%" ignore-case="true"/>
                    <econdition field-name="username" operator="like" value="%${term}%" ignore-case="true"/>
                </econditions>
                <order-by field-name="^firstName"/><order-by field-name="^lastName"/><order-by field-name="^username"/>
            </entity-find>
            <script>
                outList = []
                for (def pau in pauList) outList.add([value:pau.partyId, label:"${pau.firstName} ${pau.lastName} (${pau.username})".toString()])
            </script>
        </actions>
    </service>

    <service verb="create" noun="Account" authenticate="false">
        <description>
            Create a basic customer account including:
            - Party/Person
            - UserAccount (with specified username or emailAddress for username)
            - ContactMech/PartyContactMech for emailAddress (with EmailPrimary purpose)

            At the end this optionally logs in the user (for this to work it must be run locally).
        </description>
        <in-parameters>
            <auto-parameters entity-name="mantle.party.Person" include="nonpk"/>
            <parameter name="firstName" required="true"/>
            <parameter name="lastName" required="true"/>

            <parameter name="disabled" default-value="N"/>

            <parameter name="emailAddress" required="true"><text-email/></parameter>
            <parameter name="username" default-value="${emailAddress}"/>
            <parameter name="newPassword"><description>If empty won't create a UserAccount record.</description></parameter>
            <parameter name="newPasswordVerify"/>
            <parameter name="userGroupId"/>

            <parameter name="currencyUomId"/>
            <parameter name="locale"/>
            <parameter name="timeZone"/>

            <parameter name="loginAfterCreate" type="Boolean" default-value="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="userId"/>
            <parameter name="partyId" required="true"/>
            <parameter name="emailContactMechId"/>
        </out-parameters>
        <actions>
            <!-- do this first to get a password validation ASAP -->
            <if condition="username">
                <set field="userFullName" value="${firstName} ${middleName? middleName + ' ' : ''}${lastName}"/>
                <service-call name="org.moqui.impl.UserServices.create#UserAccount" in-map="context" out-map="newUaOut"/>
                <set field="userId" from="newUaOut.userId"/>
            </if>

            <service-call name="create#mantle.party.Party" in-map="[partyTypeEnumId:'PtyPerson', disabled:disabled]" out-map="newPartyOut"/>
            <set field="partyId" from="newPartyOut.partyId"/>
            <service-call name="create#mantle.party.Person" in-map="context"/>

            <!-- add the emailAddress -->
            <service-call name="mantle.party.ContactServices.create#EmailAddress" out-map="emailOut"
                    in-map="[emailAddress:emailAddress, partyId:partyId, contactMechPurposeId:'EmailPrimary']"/>
            <set field="emailContactMechId" from="emailOut.contactMechId"/>

            <if condition="username">
                <!-- add the partyId to the UserAccount -->
                <service-call name="update#UserAccount" in-map="[userId:newUaOut.userId, partyId:newPartyOut.partyId]"/>
                <if condition="userGroupId">
                    <service-call name="create#moqui.security.UserGroupMember"
                            in-map="[userGroupId:userGroupId, userId:userId, fromDate:ec.user.nowTimestamp]"/>
                </if>
                <!-- login the user -->
                <if condition="loginAfterCreate">
                    <script>ec.user.loginUser(username, newPassword, null)</script>
                </if>
            </if>
        </actions>
    </service>
    <service verb="update" noun="Account">
        <in-parameters>
            <parameter name="userId"/>
            <parameter name="partyId" required="true"/>
            <auto-parameters entity-name="mantle.party.Person" include="nonpk"/>

            <parameter name="disabled"/>

            <parameter name="emailAddress"><text-email/></parameter>
            <parameter name="username"/>

            <parameter name="currencyUomId"/>
            <parameter name="locale"/>
            <parameter name="timeZone"/>
        </in-parameters>
        <actions>
            <if condition="!userId">
                <entity-find entity-name="moqui.security.UserAccount" list="userAccountList"><econdition field-name="partyId"/></entity-find>
                <set field="userId" from="userAccountList?.first?.userId"/>
            </if>
            <if condition="userId"><service-call name="update#moqui.security.UserAccount" in-map="context"/></if>
            <service-call name="update#mantle.party.Party" in-map="context"/>
            <service-call name="update#mantle.party.Person" in-map="context"/>
            <service-call name="mantle.party.ContactServices.update#PartyContactOther"
                    in-map="[infoString:emailAddress, partyId:partyId, contactMechPurposeId:'EmailPrimary']"/>
        </actions>
    </service>

    <service verb="create" noun="Person">
        <in-parameters>
            <parameter name="partyId"/>
            <auto-parameters entity-name="mantle.party.Person" include="nonpk"/>
            <parameter name="firstName" required="true"/>
            <parameter name="lastName" required="true"/>
            <parameter name="roleTypeId"/>
        </in-parameters>
        <out-parameters><parameter name="partyId"/></out-parameters>
        <actions>
            <service-call name="create#mantle.party.Party" in-map="[partyId:partyId, partyTypeEnumId:'PtyPerson']"
                    out-map="context"/>
            <service-call name="create#mantle.party.Person" in-map="context"/>

            <if condition="roleTypeId">
                <service-call name="create#mantle.party.PartyRole" in-map="[partyId:partyId, roleTypeId:roleTypeId]"/>
            </if>
        </actions>
    </service>
    <service verb="create" noun="Organization">
        <in-parameters>
            <parameter name="partyId"/>
            <auto-parameters entity-name="mantle.party.Organization" include="nonpk"/>
            <parameter name="organizationName" required="true"/>
            <parameter name="roleTypeId"/>
        </in-parameters>
        <out-parameters><parameter name="partyId"/></out-parameters>
        <actions>
            <service-call name="create#mantle.party.Party" in-map="[partyId:partyId, partyTypeEnumId:'PtyOrganization']"
                    out-map="context"/>
            <service-call name="create#mantle.party.Organization" in-map="context"/>

            <if condition="roleTypeId">
                <service-call name="create#mantle.party.PartyRole" in-map="[partyId:partyId, roleTypeId:roleTypeId]"/>
            </if>
        </actions>
    </service>
    <service verb="update" noun="PartyDetail">
        <in-parameters>
            <auto-parameters entity-name="mantle.party.Party" include="nonpk"/>
            <auto-parameters entity-name="mantle.party.Person" include="nonpk"/>
            <auto-parameters entity-name="mantle.party.Organization" include="nonpk"/>
            <parameter name="partyId" required="true"/>
        </in-parameters>
        <actions>
            <entity-find-one entity-name="mantle.party.Party" value-field="party"/>
            <entity-set value-field="party" include="nonpk" map="context"/>
            <entity-update value-field="party"/>
            <if condition="party.partyTypeEnumId == 'PtyPerson'">
                <service-call name="update#mantle.party.Person" in-map="context"/>
            </if>
            <if condition="party.partyTypeEnumId == 'PtyOrganization'">
                <service-call name="update#mantle.party.Organization" in-map="context"/>
            </if>
        </actions>
    </service>
</services>
